#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Getopt::Long;

# thresholds
my $t_warn = $ENV{T_WARN} // 50;
my $t_crit = $ENV{T_CRIT} // 80;
my $cpu_usage = -1;
my $decimals = $ENV{DECIMALS} // 2;
my $label = $ENV{LABEL} // "";

# --- keep env colors (optional fallback, but wonâ€™t override config) ---
my $color_normal = $ENV{COLOR_NORMAL} // undef;
my $color_warn   = $ENV{COLOR_WARN}   // undef;
my $color_crit   = $ENV{COLOR_CRIT}   // undef;

sub help {
    print "Usage: cpu_usage [-w <warning>] [-c <critical>] [-d <decimals>]\n";
    exit 0;
}

GetOptions("help|h" => \&help,
           "w=i"    => \$t_warn,
           "c=i"    => \$t_crit,
           "d=i"    => \$decimals,
);

# get CPU usage
$ENV{LC_ALL}="en_US";
open (MPSTAT, 'mpstat 1 1 |') or die;
while (<MPSTAT>) {
    if (/^.*\s+(\d+\.\d+)[\s\x00]?$/) {
        $cpu_usage = 100 - $1;
        last;
    }
}
close(MPSTAT);

$cpu_usage eq -1 and die 'Can\'t find CPU information';

# print text
print "${label}";
printf "%.${decimals}f%%\n", $cpu_usage;
print "${label}";
printf "%.${decimals}f%%\n", $cpu_usage;

# ---- optional: only print color if you want thresholds to override ----
# Comment this block if you want 100% theme-driven colors
if ($cpu_usage >= $t_crit && defined $color_crit) {
    print "${color_crit}\n";
} elsif ($cpu_usage >= $t_warn && defined $color_warn) {
    print "${color_warn}\n";
} elsif (defined $color_normal) {
    print "${color_normal}\n";
}

